
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Math;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CalculatorParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CalculatorParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CalculatorParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CalculatorParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\005\000\002\002" +
    "\007\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\002\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\004\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\034\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\022\ufffb\030\ufffb\001\002\000\034\002\014\004\012\005" +
    "\016\006\006\007\007\010\021\011\017\013\010\014\015" +
    "\015\011\016\022\022\005\030\020\001\002\000\024\004" +
    "\012\005\025\011\017\013\010\014\015\015\011\016\022" +
    "\022\005\030\020\001\002\000\004\017\064\001\002\000" +
    "\004\017\063\001\002\000\004\030\060\001\002\000\004" +
    "\030\055\001\002\000\022\017\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\031\ufffa\001\002\000\020" +
    "\017\054\021\030\022\032\023\034\024\033\025\027\026" +
    "\031\001\002\000\004\002\001\001\002\000\004\030\051" +
    "\001\002\000\022\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\046\001\002\000\004\030\043" +
    "\001\002\000\024\004\012\005\025\011\017\013\010\014" +
    "\015\015\011\016\022\022\005\030\020\001\002\000\004" +
    "\017\023\001\002\000\022\017\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\031\ufff9\001\002\000\034" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\022\ufffc\030\ufffc" +
    "\001\002\000\020\021\030\022\032\023\034\024\033\025" +
    "\027\026\031\031\026\001\002\000\022\017\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\031\ufff8\001" +
    "\002\000\022\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\031\uffec\001\002\000\024\004\012\005" +
    "\025\011\017\013\010\014\015\015\011\016\022\022\005" +
    "\030\020\001\002\000\024\004\012\005\025\011\017\013" +
    "\010\014\015\015\011\016\022\022\005\030\020\001\002" +
    "\000\024\004\012\005\025\011\017\013\010\014\015\015" +
    "\011\016\022\022\005\030\020\001\002\000\024\004\012" +
    "\005\025\011\017\013\010\014\015\015\011\016\022\022" +
    "\005\030\020\001\002\000\024\004\012\005\025\011\017" +
    "\013\010\014\015\015\011\016\022\022\005\030\020\001" +
    "\002\000\024\004\012\005\025\011\017\013\010\014\015" +
    "\015\011\016\022\022\005\030\020\001\002\000\022\017" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\031" +
    "\031\ufff5\001\002\000\022\017\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\031\031\ufff4\001\002\000\022" +
    "\017\ufff6\021\ufff6\022\ufff6\023\034\024\033\025\027\026" +
    "\031\031\ufff6\001\002\000\022\017\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\031\ufff2\001\002\000" +
    "\022\017\ufff7\021\ufff7\022\ufff7\023\034\024\033\025\027" +
    "\026\031\031\ufff7\001\002\000\022\017\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\031\031\ufff3\001\002" +
    "\000\024\004\012\005\025\011\017\013\010\014\015\015" +
    "\011\016\022\022\005\030\020\001\002\000\020\021\030" +
    "\022\032\023\034\024\033\025\027\026\031\031\045\001" +
    "\002\000\022\017\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\031\uffee\001\002\000\024\004\012\005" +
    "\025\011\017\013\010\014\015\015\011\016\022\022\005" +
    "\030\020\001\002\000\020\017\050\021\030\022\032\023" +
    "\034\024\033\025\027\026\031\001\002\000\034\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\013" +
    "\uffff\014\uffff\015\uffff\016\uffff\022\uffff\030\uffff\001\002" +
    "\000\024\004\012\005\025\011\017\013\010\014\015\015" +
    "\011\016\022\022\005\030\020\001\002\000\020\021\030" +
    "\022\032\023\034\024\033\025\027\026\031\031\053\001" +
    "\002\000\022\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\031\ufff0\001\002\000\034\002\000\004" +
    "\000\005\000\006\000\007\000\010\000\011\000\013\000" +
    "\014\000\015\000\016\000\022\000\030\000\001\002\000" +
    "\024\004\012\005\025\011\017\013\010\014\015\015\011" +
    "\016\022\022\005\030\020\001\002\000\020\021\030\022" +
    "\032\023\034\024\033\025\027\026\031\031\057\001\002" +
    "\000\022\017\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025" +
    "\uffef\026\uffef\031\uffef\001\002\000\024\004\012\005\025" +
    "\011\017\013\010\014\015\015\011\016\022\022\005\030" +
    "\020\001\002\000\020\021\030\022\032\023\034\024\033" +
    "\025\027\026\031\031\062\001\002\000\022\017\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\031\ufff1" +
    "\001\002\000\034\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\022\ufffd\030\ufffd\001\002\000\034\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\022\ufffe\030\ufffe\001\002\000\022\017" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\031\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\004\002\003\001\001\000\004\003\012\001" +
    "\001\000\004\003\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\041\001\001\000\004\003\040\001\001\000\004" +
    "\003\037\001\001\000\004\003\036\001\001\000\004\003" +
    "\035\001\001\000\004\003\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalculatorParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalculatorParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalculatorParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    void yyerror(String s) {
        System.err.println("Error: " + s);
    }

    void add_to_history(String expr, double res) {
        if (historyCount < MAX_HISTORY) {
            history[historyCount++] = new HistoryEntry(expr, res);
        } else {
            System.arraycopy(history, 1, history, 0, MAX_HISTORY - 1);
            history[MAX_HISTORY - 1] = new HistoryEntry(expr, res);
        }
    }

    void show_history() {
        System.out.println("\nLast " + historyCount + " Calculations:");
        for (int i = 0; i < historyCount; i++) {
            System.out.println("  " + (i + 1) + ". " + history[i].expression + " = " + history[i].result);
        }
        System.out.println();
    }

    void reset_expression_buffer() {
        fullExpression.setLength(0);
    }

    static void show_banner() {
        System.out.println("\n==========================================");
        System.out.println("         ADVANCED CALCULATOR         ");
        System.out.println("==========================================");
        System.out.println("Supports: +, -, *, /, %, ^, sqrt()");
        System.out.println("Also supports: sin(), cos(), tan(), PI");
        System.out.println("Use 'EXIT' to quit");
        System.out.println("Use 'CLEAR' to reset variables & history");
        System.out.println("Use 'HISTORY' to see last 10 operations");
        System.out.println("==========================================\n");
    }

    public static void main(String[] args) throws Exception {
        show_banner();
        CalculatorLexer lexer = new CalculatorLexer(new java.io.InputStreamReader(System.in));
        CalculatorParser p = new CalculatorParser(lexer);
        p.parse();
    }

    private static final int MAX_HISTORY = 10;
    private static StringBuilder fullExpression = new StringBuilder();

    private static class HistoryEntry {
        String expression;
        double result;

        HistoryEntry(String expr, double res) {
            this.expression = expr;
            this.result = res;
        }
    }

    private static HistoryEntry[] history = new HistoryEntry[MAX_HISTORY];
    private static int historyCount = 0;
    private static double[] variables = new double[256];


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CalculatorParser$actions {
  private final CalculatorParser parser;

  /** Constructor */
  CUP$CalculatorParser$actions(CalculatorParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CalculatorParser$do_action_part00000000(
    int                        CUP$CalculatorParser$act_num,
    java_cup.runtime.lr_parser CUP$CalculatorParser$parser,
    java.util.Stack            CUP$CalculatorParser$stack,
    int                        CUP$CalculatorParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalculatorParser$result;

      /* select the action based on the action number */
      switch (CUP$CalculatorParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= calclist EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).right;
		Double start_val = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).value;
		RESULT = start_val;
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalculatorParser$parser.done_parsing();
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // calclist ::= calclist exp NEWLINE 
            {
              Double RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).value;
		
                 add_to_history(fullExpression.toString().trim(), e);
                 System.out.println("Result: " + e);
                 reset_expression_buffer();
             
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("calclist",0, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // calclist ::= calclist VARIABLE EQUALS exp NEWLINE 
            {
              Double RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-4)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-3)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).value;
		
                 variables[v] = e;
                 add_to_history(fullExpression.toString().trim(), e);
                 System.out.println("Variable " + v + " = " + e);
                 reset_expression_buffer();
             
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("calclist",0, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // calclist ::= calclist EXIT NEWLINE 
            {
              Double RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		
                 System.out.println("Exiting calculator... Goodbye!");
                 System.exit(0);
             
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("calclist",0, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // calclist ::= calclist CLEAR NEWLINE 
            {
              Double RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		
                 for (int i = 0; i < 256; i++) variables[i] = 0;
                 historyCount = 0;
                 System.out.println("All variables and history cleared!");
                 reset_expression_buffer();
             
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("calclist",0, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // calclist ::= calclist HISTORY NEWLINE 
            {
              Double RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		
                 show_history();
                 reset_expression_buffer();
             
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("calclist",0, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // calclist ::= 
            {
              Double RESULT =null;
		
                 reset_expression_buffer();
             
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("calclist",0, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.peek()).value;
		 RESULT = n; 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= PI 
            {
              Double RESULT =null;
		 RESULT = Math.PI; 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= VARIABLE 
            {
              Double RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.peek()).value;
		
            RESULT = variables[v];
            System.out.println("Variable " + v + " = " + RESULT);
        
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp PLUS exp 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp MINUS exp 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp TIMES exp 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp DIV exp 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.peek()).value;
		
            if (e2 == 0) {
                yyerror("Division by zero!");
                RESULT = 0.0;
            } else {
                RESULT = e1 / e2;
            }
        
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp MODULO exp 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.peek()).value;
		
            if (e2 == 0) {
                yyerror("Modulus by zero!");
                RESULT = 0.0;
            } else {
                RESULT = e1 % e2;
            }
        
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp POWER exp 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.peek()).value;
		 RESULT = Math.pow(e1, e2); 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= SIN LPAREN exp RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).value;
		 RESULT = Math.sin(e); 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= COS LPAREN exp RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).value;
		 RESULT = Math.cos(e); 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= TAN LPAREN exp RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).value;
		 RESULT = Math.tan(e); 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= SQRT LPAREN exp RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).value;
		
            if (e < 0) {
                yyerror("Cannot take sqrt of negative number!");
                RESULT = 0.0;
            } else {
                RESULT = Math.sqrt(e);
            }
        
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= MINUS exp 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.peek()).value;
		 RESULT = -e; 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= LPAREN exp RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-1)).value;
		 RESULT = e; 
              CUP$CalculatorParser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.elementAt(CUP$CalculatorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorParser$stack.peek()), RESULT);
            }
          return CUP$CalculatorParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CalculatorParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CalculatorParser$do_action(
    int                        CUP$CalculatorParser$act_num,
    java_cup.runtime.lr_parser CUP$CalculatorParser$parser,
    java.util.Stack            CUP$CalculatorParser$stack,
    int                        CUP$CalculatorParser$top)
    throws java.lang.Exception
    {
              return CUP$CalculatorParser$do_action_part00000000(
                               CUP$CalculatorParser$act_num,
                               CUP$CalculatorParser$parser,
                               CUP$CalculatorParser$stack,
                               CUP$CalculatorParser$top);
    }
}

}
