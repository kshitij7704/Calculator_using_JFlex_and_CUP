import java_cup.runtime.*;

parser code {
    void yyerror(String s) {
        System.err.println("‚ùå Error: " + s);
    }
    
    void add_to_history(String expr, double res) {
        if (historyCount < MAX_HISTORY) {
            history[historyCount++] = new HistoryEntry(expr, res);
        } else {
            System.arraycopy(history, 1, history, 0, MAX_HISTORY - 1);
            history[MAX_HISTORY - 1] = new HistoryEntry(expr, res);
        }
    }

    void show_history() {
        System.out.println("\nüìú Last " + historyCount + " Calculations:");
        for (int i = 0; i < historyCount; i++) {
            System.out.println("  " + (i + 1) + ". " + history[i].expression + " = " + history[i].result);
        }
        System.out.println();
    }

    void reset_expression_buffer() {
        fullExpression.setLength(0);
    }

    void show_banner() {
        System.out.println("\033[1;36m\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        System.out.println("         üöÄ ADVANCED CALCULATOR üöÄ         ");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        System.out.println("‚úî Supports: +, -, *, /, %, ^, sqrt()");
        System.out.println("‚úî Also supports: sin(), cos(), tan(), PI");
        System.out.println("‚úî Use 'EXIT' to quit");
        System.out.println("‚úî Use 'CLEAR' to reset variables & history");
        System.out.println("‚úî Use 'HISTORY' to see last 10 operations");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\033[0m");
    }

    private static final int MAX_HISTORY = 10;
    private static StringBuilder fullExpression = new StringBuilder();
    
    private static class HistoryEntry {
        String expression;
        double result;

        HistoryEntry(String expr, double res) {
            this.expression = expr;
            this.result = res;
        }
    }

    private static HistoryEntry[] history = new HistoryEntry[MAX_HISTORY];
    private static int historyCount = 0;
    private static double[] variables = new double[256];
}

terminal double NUMBER;
terminal char VARIABLE;
terminal EXIT, CLEAR, HISTORY, SQRT, MOD, SIN, COS, TAN, PI, NEWLINE;
terminal '+' , '-' , '*' , '/' , '^', '=';

non terminal double calclist, exp;
start with calclist;

calclist ::= 
    | calclist exp NEWLINE 
        {: 
            add_to_history(fullExpression.toString(), $2);
            System.out.println("‚û§ Result: " + $2);
            reset_expression_buffer();
        :}
    | calclist VARIABLE '=' exp NEWLINE 
        {: 
            variables[$2] = $4;
            add_to_history(fullExpression.toString(), $4);
            System.out.println("üìå Variable " + $2 + " = " + $4);
            reset_expression_buffer();
        :}
    | calclist EXIT NEWLINE 
        {: 
            System.out.println("üöÄ Exiting calculator... Goodbye!");
            System.exit(0);
        :}
    | calclist CLEAR NEWLINE 
        {: 
            for (int i = 0; i < 256; i++) variables[i] = 0;
            historyCount = 0;
            System.out.println("üóë All variables and history cleared!");
        :}
    | calclist HISTORY NEWLINE 
        {: show_history(); :}
    ;

exp ::= 
    NUMBER         {: RESULT = $1; :}
    | PI          {: RESULT = Math.PI; :}
    | VARIABLE    {: 
        RESULT = variables[$1];
        System.out.println("üìå Variable " + $1 + " = " + RESULT);
    :}
    | exp '+' exp {: RESULT = $1 + $3; :}
    | exp '-' exp {: RESULT = $1 - $3; :}
    | exp '*' exp {: RESULT = $1 * $3; :}
    | exp '/' exp 
        {: 
            if ($3 == 0) {
                yyerror("Division by zero!");
                RESULT = 0;
            } else {
                RESULT = $1 / $3;
            }
        :}
    | exp MOD exp 
        {: 
            if ($3 == 0) {
                yyerror("Modulus by zero!");
                RESULT = 0;
            } else {
                RESULT = $1 % $3;
            }
        :}
    | exp '^' exp {: RESULT = Math.pow($1, $3); :}
    | SIN '(' exp ')' {: RESULT = Math.sin($3); :}
    | COS '(' exp ')' {: RESULT = Math.cos($3); :}
    | TAN '(' exp ')' {: RESULT = Math.tan($3); :}
    | SQRT '(' exp ')' 
        {: RESULT = Math.sqrt($3 < 0 ? yyerror("Cannot take sqrt of negative number!") : $3); :}
    | '-' exp %prec UMINUS {: RESULT = -$2; :}
    | '(' exp ')' {: RESULT = $2; :}
    ;